# -*- mode: shell-script -*-

#
# Helpers.
#

if tty -s
then
    okay() { printf '\033[1;32m%s\033[0m' "$*"; }
    warning() { printf '\033[1;33m%s\033[0m' "$*"; }
    error() { printf '\033[1;31m%s\033[0m' "$*"; }
    em() { printf '\033[1m%s\033[0m' "$*"; }
else
    okay() { printf '%s' "$*"; }
    warning() { printf '*%s*' "$*"; }
    error() { printf '*** %s ***' "$*"; }
    em() { printf '%s' "$*"; }
fi

# `load-parent-environment` loads a parent directory's `.envrc` since `direnv`
# doesn't do this by default, and its solution – the `source_up` function – is
# kind of insecure.
load-parent-environment() {
    direnv_load "${direnv:-direnv}" exec .. "${direnv:-direnv}" dump
}

# `watch-dependencies` calls `watch_file` such that this script will be run
# again by `direnv` when anything interesting changes. Typically these watches
# are added AFTER all other operations. If added beforehand they will detect any
# changes made to those files by other operations within this script, which can
# result in this script being executed more than once by `direnv` when there
# have not been any additional changes.
watch-dependencies() {
    # Watch the list of checksums.
    watch_file .envrc.sums
    # Also load dependencies from `.envrc.deps`.
    local filename
    while IFS= read -r filename; do
        watch_file "${filename}"
    done < <( /usr/bin/sed '/^$/d;/^#/d' .envrc.deps )
}


#
# Build & load the environment.
#
# Note that Shake does NOT have a way to say if a file needs to be rebuilt or
# not (https://github.com/ndmitchell/shake/issues/289) so we do it ourselves
# using `shasum`.
#
# Note that, although `.envrc.cache` is listed as a dependency in `.envrc.deps`
# and so should be covered by checking `.envrc.sums`, we still check for its
# existence because `.envrc.sums` could have been generated from an older
# dependency list and so not have an entry for `.envrc.cache`.
#

if [[ -e .envrc.cache && -e .envrc.sums ]] &&
       /usr/bin/shasum --check --status .envrc.sums
then
    log_status "$(okay OKAY): $(em 'Nix environment is up-to-date!')" >&2
    load-parent-environment
    # shellcheck disable=1091
    source .envrc.cache
    watch-dependencies

    export __noredink_env=active

else
    if [[ -e .envrc.cache ]]
    then
        log_status "$(warning WARNING): $(em 'Nix environment is out of date!') " >&2
        log_status "--> Use $(em make bootstrap) to rebuild it" >&2
    else
        log_status "$(error ERROR): $(em 'Nix environment is not yet built!')" >&2
        log_status "--> Use $(em make bootstrap) to build it" >&2
    fi
    load-parent-environment
    watch-dependencies

    export __noredink_env=inactive

fi


# End.
